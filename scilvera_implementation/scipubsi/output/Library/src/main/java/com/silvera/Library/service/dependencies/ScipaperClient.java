/**
 THIS IS GENERATED CODE AND SHOULD NOT BE CHANGED MANUALLY!!!

 Generated by: silvera
 Date: 2022-05-22 14:38:49
 */

package com.silvera.Library.service.dependencies;

import com.silvera.Library.domain.model.dependencies.Paper;
import org.springframework.stereotype.Service;
import com.silvera.Library.domain.model.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.client.RestTemplate;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;



@Service
public class ScipaperClient {

    @Autowired
    private DiscoveryClient discoveryClient;

    private String getServiceURL(String serviceName){
        List<ServiceInstance> list = discoveryClient.getInstances(serviceName);
        if (list != null && list.size() > 0 ) {
            return list.get(0).getUri().toString();
        }
        return null;
    }


    @HystrixCommand(fallbackMethod = "papers_fallback")
    public java.util.List<Paper> papers() {


        String targetUri = getServiceURL("Scipaper");
        RestTemplate restTemplate = new RestTemplate();


        Paper[] result = restTemplate.getForObject(targetUri + "/papers", Paper[].class);
        return Arrays.asList(result);


    }

    //
    // This is a fallback method if method 'papers' fails!
    //
    public java.util.List<Paper> papers_fallback() {
        return new ArrayList<>();
    }
}