/**
    THIS IS GENERATED CODE AND SHOULD NOT BE CHANGED MANUALLY!!!

    Generated by: silvera
    Date: 2022-05-22 03:03:00
*/

package com.silvera.User.controller;

import java.util.Collection;

import com.silvera.User.dto.UserLoginDTO;
import com.silvera.User.dto.UserTokenState;
import com.silvera.User.service.impl.UserService;
import com.silvera.User.utils.TokenUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import javax.validation.Valid;

import com.silvera.User.domain.model.*;



@RefreshScope
@RestController
public class UserController {




    @Autowired
    private TokenUtils tokenUtils;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    UserService userService;
    
    @RequestMapping(value="/user", method=RequestMethod.POST)
    @ResponseBody
    public User createUser(@Valid @RequestBody User user){
        return userService.createUser(user);
    }
    
    
    @RequestMapping(value="/user/{id}", method=RequestMethod.PUT)
    @ResponseBody
    public User updateUser(@PathVariable java.lang.String id, @Valid @RequestBody User user){
        return userService.updateUser(id, user);
    }
    
    
    @RequestMapping(value="/user/{id}", method=RequestMethod.GET)
    @ResponseBody
    public User readUser(@PathVariable java.lang.String id){
        return userService.readUser(id);
    }
    
    
    @RequestMapping(value="/user/{id}", method=RequestMethod.DELETE)
    @ResponseBody
    public void deleteUser(@PathVariable java.lang.String id){
        userService.deleteUser(id);
    }


    @RequestMapping(value = "/api/login", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<UserTokenState> loginUser(@RequestBody UserLoginDTO userLoginDTO){
        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
                userLoginDTO.getUsername(), userLoginDTO.getPassword()));

        // Ukoliko je autentifikacija uspesna, ubaci korisnika u trenutni security
        // kontekst
        SecurityContextHolder.getContext().setAuthentication(authentication);
        User user = (User) authentication.getPrincipal();
        String jwt = tokenUtils.generateToken(user.getUsername());
        int expiresIn = tokenUtils.getExpiredIn();
        return ResponseEntity.ok(new UserTokenState(jwt, expiresIn));
    }


    
        
    

    @GetMapping(value="userexists/{username}")


    @ResponseBody
    public java.lang.Boolean userExists(@PathVariable java.lang.String username) {
        
        return userService.userExists(username);

    }
    

}